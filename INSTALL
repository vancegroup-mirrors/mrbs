        MRBS Installation Instructions



REQUIREMENTS
---------------------------------------------------------------------------
MRBS works with MySQL, PostgreSQL, Oracle, FrontBase, Interbase/Firebird and
Microsoft SQL Server database systems. You must have PHP with support for your
chosen database system installed and working for this application. See the
PHP (www.php.net) and your database web site for more info on setting these
up. You need to know how to install, secure, run, maintain, and back up your
chosen database system.

You can run PHP either as a CGI or with a direct module interface (also called 
SAPI). These servers include Apache, Microsoft Internet Information Server, 
Netscape and iPlanet servers. Many other servers have support for ISAPI, the 
Microsoft module interface.
You'll get better performance with PHP setup as a module.  Not only will you 
not have to deal with the CGI performance hit, but you'll be able to use PHP's
database connection pooling. However, be careful that you don't exceed
the maximum number of connections allowed to your database; with connection
pooling PHP/Apache can potentially create a connection from each Apache
child server to the database. 
Also many mrbs authentication schemes use basic http authentication. These 
don't work if you run PHP as a CGI.

If you are using PHP as an Apache module, you probably want to ensure that
the Apache MaxRequestsPerChild is not set to 0, in case of undetected memory
leaks in PHP or MRBS.

This version of MRBS was tested with PHP 4.3.2. Older versions of PHP4 may
work, but PHP3 won't.

If you use MySQL, versions 3.22.32, 3.23.23, 3.23.53, 4.0.13 and 4.0.14 have
been tested and reported to work.

If you use PostgreSQL, you need at least version 7.0, and version 7.0.3 has
been tested and reported to work.


FILE UNPACKING
---------------------------------------------------------------------------
To install MRBS, just unpack the distribution into a temporary directory,
then copy the files in the "web" subdirectory into a new directory somewhere
your web server can find them.

For example:

Unpack the software into a new temporary directory, something like this:
    $ tar -xvzf ~/download/mrbs-1.0.tgz       (or whatever version)
    $ cd mrbs-1.0                             (or whatever version)

If you are upgrading from a previous version of MRBS, you should save your
"config.inc.php" or "config.inc" file so you can compare and update the new
file with your site-specific changes. Then rename your existing MRBS web
server directory.
For example:
    $ cp /var/lib/apache/htdocs/mrbs/config.inc.php config.site.inc
    $ mv /var/lib/apache/htdocs/mrbs /var/lib/apache/htdocs/mrbs.old

Now install MRBS by copying the contents of the "web" subdirectory of the
distribution somewhere your web server can find it.  For example:
    $ cp -r web /var/lib/apache/htdocs/mrbs

DATABASE SETUP

If you are upgrading from MRBS version already using the MDB class, and
you are continuing to use the same DBMS, your database is already set up, so
you can skip to the Application Setup section.

Database and tables creation
----------------------------

DATABASE ACCOUNT GENERAL NOTE

Most relational databases need an account to connect to. 
    - install/upgrade : you need to supply an account than can create tables
      and databases, often known as 'superuser'. If you can't use one, then 
      ask you administrator to run the installation script with such account
    - production : you need an account that only have rights on the mrbs 
      database

For a new install:

Before running the installation script, you need to edit the first section of
mrbs-create.php file ("Database settings") so that the script knows how to
connect to your database. Here is a list of these settings:

$dbsys : this is the type of your database. Default is 'mysql', but you can
use any of the following types:

mysql   -> MySQL
pgsql   -> PostgreSQL
ibase   -> Interbase/Firebird
mssql   -> Microsoft SQL Server
oci8    -> Oracle
fbsql   -> FrontBase

$db_host : this is the host name of the database server. If the database
server and web server are the same machine, use $db_host="localhost".
If you use Oracle, enter your Oracle SID here instead.

$db_port : leave empty if the database server use its default port.

$db_database : Database name to create. Default to "mrbs", but you can use any
name.

$db_login/$db_password : here you need to supply a username that has enough
rights to create a database. See you DBMS documentation.
If the DBMS driver does not support database creation or if this operation
requires special database administrator permissions that may not be available
to you, you have to set $db_create flag to 0 (see below). In this case,
ask your administrator to create an account that have enough rights to create 
tables on the mrbs database.

$db_create : if you have to use an existing database, or need to ask someone
else to create the database, you should set this flag to 0.

    DATABASE ISSUES
    - Oracle. Currently Oracle driver does not support Database creation, so
      you have to set this flag to 0.

$db_protocol :  default 'tcp'. With PostgreSQL, you can use 'unix' to
use Unix Domain Sockets to connect to the database server on the same machine.

* DBMS specific options *

$oci8_home : Home directory path where Oracle is installed if it is running
on the local machine. (i.e. /usr/local/oracle/8i  or C:\oracle\ora81).
Default value: value of the environment variable ORACLE_HOME.

---
Now this is as simple as running the following command on your shell:

$ php mrbs_create.php

This will create the database and the tables for you. Alternately you can copy
mrbs_create.php and mrbs.schema.xml in the same web server directory as mrbs
and run the command from your browser.

Note: in either case, mrbs_create.php and mrbs.schema.xml must be in the 
      same directory.

If you get an error message "Error: Could not copy the new database 
definition file to the current file" or something like that, check that the 
account running php (cgi) or your web server have sufficient rights to write
in mrbs directory. Then delete the mrbs database before running the script
again.

[NOTE]: The database creation script will create a file mrbs.schema.xml.before. 
We advise to keep this file somewhere. In the case we may need to update the 
schema of the database (ie. change the name of one table, add a field), all
we need to do after editing the xml schema file is executing the same script
we used to install the database. Provided the script find the previously 
installed schema file (mrbs.schema.xml.before), it will attempts to install the
requested changes without affecting the data that was stored in the database
after the database was installed for the first time.

Note : On some DBMS you may need to set rights on the tables. You should not
need to do that if you create the tables while connected to the database as
the same user MRBS will use (the one in config.inc.php), because that account
will own the tables and have all rights.  However if you create the tables
with another account, you need to grant rights to the user found in your
config.inc.php file. Use your DBMS tools to do that or ask for an
administrator. For PostgreSQL, see "grant.pg.sql". If you need to delete the
tables, see "destroy.php".

The tables are now empty and ready for use, but don't leave the files 
mrbs_create.php and mrbs.schema.xml in your web directory. If you want to add 
a few sample areas and rooms without going through the Admin function, use
this script:

Copy the file sample-data.php into you mrbs web server directory, then type:

$ php sample-data.php

or open it with your browser.

Also see the description of testdata.php in the README file.


For an upgrade:

See the file UPGRADE in the distribution.

Maintenance:

Be sure to back up your database regularly.
For PostgreSQL, be sure to run the "vacuum" command regularly.
You can clean out old entries from your database using the supplied PHP
scripts purge.php. Copy purge.php into your web site, run it with
http://yourhost/mrbs/purge.php - Note : with some browser/OS, you need to
refresh the page to effectively run the script. (Don't leave purge.php
in your web site, though). Read the comments at the top of the scripts before
using them.

APPLICATION SETUP
---------------------------------------------------------------------------
Next, you will need to customize the file "config.inc.php"...

If you are upgrading from a previous version of MRBS, use your saved
copy of "config.inc.php" as a reference. Do not just use your old
config.inc.php file, however, because there are changes and new settings.

Refer to the comments in the supplied config.inc.php file for more details.
The following sections can be configured:


1. Database Settings:

Basically, see the section "New install" above, as it is the same settings,
except for these :

By default, MRBS will use PHP persistent (pooled) database connections,
for better performance. Depending on your web server and database server
configuration, it is possible that this will cause MRBS to reach the maximum
number of connections allowed to your database, since each Apache child
process may keep a connection open. Then, users will randomly get errors
when trying connecting to MRBS.  If you would rather use non-persistent
database connections, sets the $db_nopersist variable to TRUE.


2. Site Identification:

Specify your company or site name, and contact information. The company name
is displayed at the top of each page, and the contact information is
displayed in the help file.

    $mrbs_admin = "Your Administrator";
    $mrbs_admin_email = "admin_email@your.org";
    $mrbs_company = "Your Company";

Alternately, if you want to display your organization logo, replace the
$mrbs_company line like this :

$mrbs_company = "<a href=http://www.your_organization.com/><img src=your_logo.gif border=0></a>";

$url_base = "";

This is to fix URL problems when using a proxy in the environment
Then specify the real path before your mrbs directory like this:
$url_base =  "http://webtools.uab.ericsson.se/oam";


3. Calendar Settings:

There are two options here:
- regular consecutive booking periods (default)
  for example: every half hour period from 7 AM to 7 PM can be booked
- user-defined periods
  for example: school periods where periods are of different lengths
  and are not consecutive because of change-over time or breaks.

It is not possible to swap between these two options once bookings have
been created and to have meaningful entries.  This is due to differences
in the way that the data is stored.

The settings for each option are described below:

    a) Regular Consecutive periods
    Specify the resolution in minutes. MRBS will display blocks of this size,
    and will round up all entries to an even multiple of this many minutes.
    Specify a number which divides evenly into hours, for example one of:

        $resolution =  900;   # 15 minutes
        $resolution = 1800;   # Half hour
        $resolution = 3600;   # Whole hours

    Specify the start and end of the day in 24 hour notation, using whole
    hours.

        $morningstarts = 7;   # First block is 7 AM.
        $eveningends = 19;    # Last block starts at 7 PM.

    There is also $eveningends_minutes to give you more control over the last
    block displayed for each day. For example, to display full 24 hour days
    with 30 minute intervals:

        $resolution = 1800;
        $morningstarts = 0;
        $eveningends = 23;
        $eveningends_minutes = 30;

    Note: Be careful to avoid specifying options that display blocks
    overlaping the next day, since it is not properly handled.

    b) User-defined periods
    To enable this option set
        $enable_periods = TRUE;

    Then define the names of the periods that you wish to use in chronological
    order.  This is a free-form field and can contain anything, such as a
    descriptive name for the period or the start and end time.

    For example:
        $periods[] = "Period&nbsp;1";
        $periods[] = "Period&nbsp;2";
        ...
    or
        $periods[] = "09:15&nbsp;-&nbsp;09:50";
        $periods[] = "09:55&nbsp;-&nbsp;10:35";
        ...

    &nbsp; is used to ensure that the name or description is not wrapped
    when the browser determines the column widths to use in day and week
    views.

    A maximum of 60 periods may be defined.

    Note:
    1) Changing the number of periods after bookings have been entered may
    lead to incorrect reservations being displayed where the booking does not
    end on the day that it starts.
    2) The periods bear no relation to clock time during a day.


To control international preferences for the calendar displays, use
$weekstarts to change the first day of the week from the default of
Sunday; use $dateformat to show dates as "Month Day" or "Day Month"
in the page footers; use $twentyfourhour_format to show dates in 12 or 24 hour
format.


4. Miscellaneous Settings:

These settings control:

- the maximum number of repeat entries which can be created at once (a safety
  feature),
- the default report time period,
- the number of search results to return per page,
- the page refresh rate,
- the way area/rooms are selected (html list or a drop-down select box),
- the way entries are displayed in monthly view (start/end slot or brief 
  description).
- the way weeks are displayed in the bottom of the page (as week numbers (ie. 
  42) instead of 'first day of the week' (13 Oct)).


5. Authentication:

Read the file AUTHENTICATION for information about this section. By default, 
config.inc.php uses "php" session management and "config" authentication 
method, allowing only demo users to book rooms, and "administrator" is defined 
to administer the system. Demo users are "alice" and "bob" (passwords "a" and 
"b") and "administrator" (password 'secret') is administrator.


6. Language:

MRBS supports multiple languages, which can be used at the same time, based on 
what the client is using. One of the environment variables supplied to PHP is 
$HTTP_ACCEPT_LANGUAGE, which we use to choose a language file. You can specify 
the default in config.inc.php. See the file called LANGUAGE for more info.

MRBS also uses your OS locale support for certain date/time strings.
There is some code that tries to figure out what locale should be used
based on your browser. Use "locale -a" on your unix system to find out what
locale support is installed.

* Revamped localisation/internationalisation. 

From mrbs-1.2-pre2, MRBS can be called  fulled Unicode, as long as the 
config variable $unicode_encoding is set to 1 (this is a default setting now). 
If this is set, then MRBS serves all of it's pages in UTF-8 and stores
everything in the database in UTF-8. This means that all languages work
together. So, the Japanese one may use "Shift JIS", European ones "iso-8859-1"
(or perhaps "iso-8859-15", etc). So, MRBS translates all these different
encodings into an encoding that can represent all of them, UTF-8. Then,
all pages are displayed in UTF-8, and all text in the database is encoded
in UTF-8 too.

IF THIS DOES NOT WORK for you (your server may not have unicode support),
just set $unicode_encoding to 0. MRBS will run the old way, with each
language string stored using its own character set.

To  use Unicode, php should be built with 'iconv' support ('--with-iconv'
directive). On Windows, three things are needed :

- iconv.dll file in in the system path. Either copy it from your
  \%phpdir%\dlls\ directory into \%windir%\system32\ directory,
  or add your \%phpdir%\dlls\ directory to your PATH environment variable.
  (Note: for Microsoft IIS, you HAVE to copy iconv.dll into \%windir%\system32\)
- uncomment php_iconv.dll in php.ini.
- extension directory in php.ini have to be properly set to your actual
  \%phpdir%\extensions\


Note: Upgrading mysql database from previous charsets to Unicode :

	  You can use convert_db_to_utf8.php script to convert text in the
	  database to UTF8, to use MRBS with $unicode_encoding set to 1. The
	  administrator should copy it into the web directory, run it (choosing
	  the encoding to convert from) ONCE, and then move it back out of the
	  web directory. We recommend you backup your database before running
	  this script if you are at all worried.


7. Entry Types:

By default, MRBS defines two "meeting types" - internal and external. There
are a total of 10 types ready to be used, if you assign names to them in
your config.inc.php file. Each type has a color, defined in the style sheet.


HELP/FAQ File:

Customize site_faq.html if desired.  It contains help that can be tailored
to your environment. Currently this help is available in english and in french.


SECURITY NOTES!
---------------------------------------------------------------------------
You can configure your web server so that users can not obtain the ".inc"
files but this is not essential, since critical files containing your
database login and password use a ".php" extension like config.inc.php.
See your web server documentation on how to do this.

There is an Apache .htaccess file included, but Apache might ignore it because
of the "AllowOverride None" in your httpd.conf. Either change "AllowOverride
None" to "AllowOverride Limit", create a new <Directory> entry with the
contents of the .htaccess file in it, or add the contents of the .htaccess
to httpd.conf where it says "<Files ~ "^\.ht">". And then read the Apache
docs five or six times, until you know what you just did.

You may protect "config.inc.php" to only allow the web server to read it.
For example:   # chown httpd config.inc.php; chmod 400 config.inc.php

The script "destroy.php" ,"mrbs_create.php", "purge.php" and
"testdata.php" are for maintenance/testing only.  Do not leave them in a
directory accessible to your web server. Anyone running this will add a
large number of test entries to your database, destroy entries, regardless of
authentication, and book all your rooms to people you've never heard of.

$Id$
